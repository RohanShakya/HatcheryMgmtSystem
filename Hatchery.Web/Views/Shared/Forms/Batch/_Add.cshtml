@model Nepaltech.Models.Forms.BatchModel

<form action="@(Url.Action("Create"))" method="post" class="nt-form" id="form-add-batch">
    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="BatchId"> Batch Code </label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div> @*@Html.TextBoxFor(m => m.Code, new { @class = "form-control" })*@
                @Html.Kendo().TextBoxFor(m => m.Code)
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="BreedId">Select Breed</label> </div> </div>
        <div class="col-md-offset-0 col-md-6"><div>
                @(Html.Kendo().DropDownList()
              .Name("BreedId")
              .HtmlAttributes(new { style = "width:100%" })
              .OptionLabel("Select Breed...")
              .DataTextField("BreedName")
              .DataValueField("Id")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetCascadeBreeds", "Batch");
                  });
              })
                )
            @Html.ValidationMessageFor(model => model.BreedId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="BreedTypeId">Select BreedType</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            @(Html.Kendo().DropDownListFor(m => m)
                .Name("BreedTypeId")
          .DataTextField("BreedType")
          .DataValueField("Id")
          .OptionLabel("Select BreedType...")
          .HtmlAttributes(new { id = "breedtype", data_value_primitive = "true" })
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetCascadeBreedTypes", "Batch").Data("filterProducts").Type(HttpVerbs.Get);
              })
              .ServerFiltering(true);
          }).Enable(false)
          .AutoBind(false)
          //.CascadeFrom("TableId")
          .CascadeFrom("BreedId")
            )
            @Html.ValidationMessageFor(model => model.BreedTypeId, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />

    @*<div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="BreedId">Select Breed </label> </div> </div>
        <div class="col-md-offset-0 col-md-3">
           
            <div class="col-md-10"> @Html.DropDownList("BreedId", null, new { @class = "form-control" })</div>
        </div>
    </div>*@

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="FarmId">Imported Country</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">

            <div>
                @(Html.Kendo().DropDownList()
              .Name("CountryId")
              .HtmlAttributes(new { style = "width:100%" })
              .OptionLabel("Select country...")
              .DataTextField("CountryName")
              .DataValueField("Id")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetCascadeCountries", "AddChicken");
                  });
              })
                )
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="LocationId"> Arrival Date</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div>
                @(Html.Kendo().DatePicker()
                  .Name("ArrivalDate")
                  .Value(DateTime.Now)
                  .HtmlAttributes(new { style = "width: 100%", title = "datepicker" })
                )
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="TotalMale">Total Male</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div>
                @*@Html.TextBoxFor(m => m.TotalMale, new { @class = "form-control" })*@
                @Html.Kendo().IntegerTextBoxFor(m => m.TotalMale).HtmlAttributes(new { min = "0" })
                @Html.ValidationMessageFor(model => model.TotalMale, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="TotalFemale">Total Female</label> </div> </div>

        <div class="col-md-offset-0 col-md-6">
            <div>
                @Html.Kendo().IntegerTextBoxFor(m => m.TotalFemale).HtmlAttributes(new { min = "0" })
                @Html.ValidationMessageFor(model => model.TotalFemale, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="DeadMale">Dead Male</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div>
                @Html.Kendo().IntegerTextBoxFor(m => m.DeadMale).HtmlAttributes(new { min = "0" })
                @Html.ValidationMessageFor(model => model.DeadMale, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="DeadFemale">Dead Female</label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div>
                @Html.Kendo().IntegerTextBoxFor(m => m.DeadFemale).HtmlAttributes(new { min = "0" })
                @Html.ValidationMessageFor(model => model.DeadFemale, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-offset-0 col-md-3"> <div> <label class="control-label" for="TotalCost"> Total Cost </label> </div> </div>
        <div class="col-md-offset-0 col-md-6">
            <div> @Html.Kendo().IntegerTextBoxFor(m => m.TotalCost).HtmlAttributes(new { min = "0" })</div>
        </div>
    </div>

    <div>
        <input type="submit" value="Save" class="btn btn-default" />
        @*@Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-primary" })*@
    </div>
</form>

@*<script>
            function filterProducts() {
                return {
                    farms: $("#FarmId").val()
                };
            }
</script>*@

